import { __decorate, __extends } from "tslib";
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova } from '@ionic-native/core';
import * as ɵngcc0 from '@angular/core';
var StreamingMedia = /** @class */ (function (_super) {
    __extends(StreamingMedia, _super);
    function StreamingMedia() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    StreamingMedia.prototype.playVideo = function (videoUrl, options) { return cordova(this, "playVideo", { "sync": true }, arguments); };
    StreamingMedia.prototype.playAudio = function (audioUrl, options) { return cordova(this, "playAudio", { "sync": true }, arguments); };
    StreamingMedia.prototype.stopAudio = function () { return cordova(this, "stopAudio", { "sync": true }, arguments); };
    StreamingMedia.prototype.pauseAudio = function () { return cordova(this, "pauseAudio", { "sync": true, "platforms": ["iOS"] }, arguments); };
    StreamingMedia.prototype.resumeAudio = function () { return cordova(this, "resumeAudio", { "sync": true, "platforms": ["iOS"] }, arguments); };
    StreamingMedia.pluginName = "StreamingMedia";
    StreamingMedia.plugin = "cordova-plugin-streaming-media";
    StreamingMedia.pluginRef = "plugins.streamingMedia";
    StreamingMedia.repo = "https://github.com/nchutchind/cordova-plugin-streaming-media";
    StreamingMedia.platforms = ["Amazon Fire OS", "Android", "iOS"];
StreamingMedia.ɵfac = function StreamingMedia_Factory(t) { return ɵStreamingMedia_BaseFactory(t || StreamingMedia); };
StreamingMedia.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: StreamingMedia, factory: function (t) { return StreamingMedia.ɵfac(t); } });
var ɵStreamingMedia_BaseFactory = /*@__PURE__*/ ɵngcc0.ɵɵgetInheritedFactory(StreamingMedia);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(StreamingMedia, [{
        type: Injectable
    }], null, null); })();
    return StreamingMedia;
}(IonicNativePlugin));
export { StreamingMedia };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9AaW9uaWMtbmF0aXZlL3BsdWdpbnMvc3RyZWFtaW5nLW1lZGlhL25neC9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLDhCQUFzQyxNQUFNLG9CQUFvQixDQUFDOztBQUN4RTtBQUVtRCxJQThFZixrQ0FBaUI7QUFBQztBQUduRDtBQUNzQjtBQUFNLElBRzdCLGtDQUFTLGFBQUMsUUFBZ0IsRUFBRSxPQUErQjtBQUk5QixJQUk3QixrQ0FBUyxhQUFDLFFBQWdCLEVBQUUsT0FBK0I7QUFLekMsSUFDbEIsa0NBQVM7QUFLb0IsSUFDN0IsbUNBQVU7QUFNTixJQUFKLG9DQUFXO0FBRWlGO0FBQWtEO0FBQThEO0FBQXlEO0FBQTBGO0lBbkNwVixjQUFjLHdCQUQxQixVQUFVLEVBQUUsUUFDQSxjQUFjOzs7OzswQkFBRTtBQUFDLHlCQWxGOUI7QUFBRSxFQWtGa0MsaUJBQWlCO0FBQ3BELFNBRFksY0FBYztBQUFJIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29yZG92YSwgSW9uaWNOYXRpdmVQbHVnaW4sIFBsdWdpbiB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvY29yZSc7XG5cbi8qKlxuICogT2JqZWN0IG9mIG9wdGlvbnMgdG8gcGFzcyBpbnRvIHRoZSBwbGF5VmlkZW8gbWV0aG9kLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIFN0cmVhbWluZ1ZpZGVvT3B0aW9ucyB7XG4gIC8qKiBFeGVjdXRlcyBhZnRlciBzdWNjZXNzIHBsYXlpbmcgYXVkaW8uICovXG4gIHN1Y2Nlc3NDYWxsYmFjaz86IEZ1bmN0aW9uO1xuICAvKiogRXhlY3V0ZXMgYWZ0ZXIgZXJyb3IgcGxheWluZyB2aWRlby4gKi9cbiAgZXJyb3JDYWxsYmFjaz86IEZ1bmN0aW9uO1xuICAvKiogRm9yY2Ugb25lIG9yaWVudGF0aW9uIGZvciBwbGF5aW5nIHZpZGVvLiAqL1xuICBvcmllbnRhdGlvbj86IHN0cmluZztcbiAgLyoqIFNob3VsZCB0aGUgdmlkZW8gY2xvc2UgYWZ0ZXIgaXQncyBvdmVyLiBEZWZhdWx0cyB0byB0cnVlLiAqL1xuICBzaG91bGRBdXRvQ2xvc2U/OiBib29sZWFuO1xuICAvKiogU2hvdWxkIHRoZSB2aWRlbyBoYXZlIGNvbnRyb2xzLiBEZWZhdWx0cyB0byB0cnVlLiBBbmRyb2lkIG9ubHkuICovXG4gIGNvbnRyb2xzPzogYm9vbGVhbjtcbn1cblxuLyoqXG4gKiBPYmplY3Qgb2Ygb3B0aW9ucyB0byBwYXNzIGludG8gdGhlIHBsYXlBdWRpbyBtZXRob2QuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgU3RyZWFtaW5nQXVkaW9PcHRpb25zIHtcbiAgLyoqIEJhY2tncm91bmQgY29sb3IgZm9yIGF1ZGlvIHBsYXllci4gKi9cbiAgYmdDb2xvcj86IHN0cmluZztcbiAgLyoqIEJhY2tncm91bmQgaW1hZ2UgZm9yIGF1ZGlvIHBsYXllci4gKi9cbiAgYmdJbWFnZT86IHN0cmluZztcbiAgLyoqXG4gICAqIEJhY2tncm91bmQgaW1hZ2Ugc2NhbGUgZm9yIGF1ZGlvIHBsYXllci5cbiAgICogVmFsaWQgdmFsdWVzIGFyZTpcbiAgICogZml0XG4gICAqIHN0cmV0Y2hcbiAgICogYXNwZWN0U3RyZXRjaC5cbiAgICovXG4gIGJnSW1hZ2VTY2FsZT86IHN0cmluZztcbiAgLyoqIFN0YXJ0IGF1ZGlvIHBsYXllciBpbiBmdWxsIHNjcmVlbi4gaU9TIG9ubHkuICovXG4gIGluaXRGdWxsc2NyZWVuPzogYm9vbGVhbjtcbiAgLyoqXG4gICAqIEtlZXBzIHRoZSBzY3JlZW4gbGl0IGFuZCBzdG9wcyBpdCBmcm9tIGxvY2tpbmdcbiAgICogd2hpbGUgYXVkaW8gaXMgcGxheWluZy4gQW5kcm9pZCBvbmx5LlxuICAgKi9cbiAga2VlcEF3YWtlPzogYm9vbGVhbjtcbiAgLyoqIEV4ZWN1dGVzIGFmdGVyIHN1Y2Nlc3MgcGxheWluZyBhdWRpby4gKi9cbiAgc3VjY2Vzc0NhbGxiYWNrPzogRnVuY3Rpb247XG4gIC8qKiBFeGVjdXRlcyBhZnRlciBlcnJvciBwbGF5aW5nIGF1ZGlvLiAqL1xuICBlcnJvckNhbGxiYWNrPzogRnVuY3Rpb247XG59XG5cbi8qKlxuICogQG5hbWUgU3RyZWFtaW5nIE1lZGlhXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoaXMgcGx1Z2luIGFsbG93cyB5b3UgdG8gc3RyZWFtIGF1ZGlvIGFuZCB2aWRlbyBpbiBhIGZ1bGxzY3JlZW4sIG5hdGl2ZSBwbGF5ZXIgb24gaU9TIGFuZCBBbmRyb2lkLlxuICpcbiAqIEB1c2FnZVxuICogYGBgdHlwZXNjcmlwdFxuICogaW1wb3J0IHsgU3RyZWFtaW5nTWVkaWEsIFN0cmVhbWluZ1ZpZGVvT3B0aW9ucyB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvc3RyZWFtaW5nLW1lZGlhL25neCc7XG4gKlxuICogY29uc3RydWN0b3IocHJpdmF0ZSBzdHJlYW1pbmdNZWRpYTogU3RyZWFtaW5nTWVkaWEpIHsgfVxuICpcbiAqIGxldCBvcHRpb25zOiBTdHJlYW1pbmdWaWRlb09wdGlvbnMgPSB7XG4gKiAgIHN1Y2Nlc3NDYWxsYmFjazogKCkgPT4geyBjb25zb2xlLmxvZygnVmlkZW8gcGxheWVkJykgfSxcbiAqICAgZXJyb3JDYWxsYmFjazogKGUpID0+IHsgY29uc29sZS5sb2coJ0Vycm9yIHN0cmVhbWluZycpIH0sXG4gKiAgIG9yaWVudGF0aW9uOiAnbGFuZHNjYXBlJyxcbiAqICAgc2hvdWxkQXV0b0Nsb3NlOiB0cnVlLFxuICogICBjb250cm9sczogZmFsc2VcbiAqIH07XG4gKlxuICogdGhpcy5zdHJlYW1pbmdNZWRpYS5wbGF5VmlkZW8oJ2h0dHBzOi8vcGF0aC90by92aWRlby9zdHJlYW0nLCBvcHRpb25zKTtcbiAqXG4gKiBgYGBcbiAqIEBpbnRlcmZhY2VzXG4gKiBTdHJlYW1pbmdWaWRlb09wdGlvbnNcbiAqIFN0cmVhbWluZ0F1ZGlvT3B0aW9uc1xuICovXG5AUGx1Z2luKHtcbiAgcGx1Z2luTmFtZTogJ1N0cmVhbWluZ01lZGlhJyxcbiAgcGx1Z2luOiAnY29yZG92YS1wbHVnaW4tc3RyZWFtaW5nLW1lZGlhJyxcbiAgcGx1Z2luUmVmOiAncGx1Z2lucy5zdHJlYW1pbmdNZWRpYScsXG4gIHJlcG86ICdodHRwczovL2dpdGh1Yi5jb20vbmNodXRjaGluZC9jb3Jkb3ZhLXBsdWdpbi1zdHJlYW1pbmctbWVkaWEnLFxuICBwbGF0Zm9ybXM6IFsnQW1hem9uIEZpcmUgT1MnLCAnQW5kcm9pZCcsICdpT1MnXSxcbn0pXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgU3RyZWFtaW5nTWVkaWEgZXh0ZW5kcyBJb25pY05hdGl2ZVBsdWdpbiB7XG4gIC8qKlxuICAgKiBTdHJlYW1zIGEgdmlkZW9cbiAgICogQHBhcmFtIHZpZGVvVXJsIHtzdHJpbmd9IFRoZSBVUkwgb2YgdGhlIHZpZGVvXG4gICAqIEBwYXJhbSBvcHRpb25zIHtTdHJlYW1pbmdWaWRlb09wdGlvbnN9IE9wdGlvbnNcbiAgICovXG4gIEBDb3Jkb3ZhKHsgc3luYzogdHJ1ZSB9KVxuICBwbGF5VmlkZW8odmlkZW9Vcmw6IHN0cmluZywgb3B0aW9ucz86IFN0cmVhbWluZ1ZpZGVvT3B0aW9ucyk6IHZvaWQge31cblxuICAvKipcbiAgICogU3RyZWFtcyBhbiBhdWRpb1xuICAgKiBAcGFyYW0gYXVkaW9Vcmwge3N0cmluZ30gVGhlIFVSTCBvZiB0aGUgYXVkaW8gc3RyZWFtXG4gICAqIEBwYXJhbSBvcHRpb25zIHtTdHJlYW1pbmdBdWRpb09wdGlvbnN9IE9wdGlvbnNcbiAgICovXG4gIEBDb3Jkb3ZhKHsgc3luYzogdHJ1ZSB9KVxuICBwbGF5QXVkaW8oYXVkaW9Vcmw6IHN0cmluZywgb3B0aW9ucz86IFN0cmVhbWluZ0F1ZGlvT3B0aW9ucyk6IHZvaWQge31cblxuICAvKipcbiAgICogU3RvcHMgc3RyZWFtaW5nIGF1ZGlvXG4gICAqL1xuICBAQ29yZG92YSh7IHN5bmM6IHRydWUgfSlcbiAgc3RvcEF1ZGlvKCk6IHZvaWQge31cblxuICAvKipcbiAgICogUGF1c2VzIHN0cmVhbWluZyBhdWRpb1xuICAgKi9cbiAgQENvcmRvdmEoeyBzeW5jOiB0cnVlLCBwbGF0Zm9ybXM6IFsnaU9TJ10gfSlcbiAgcGF1c2VBdWRpbygpOiB2b2lkIHt9XG5cbiAgLyoqXG4gICAqIFJlc3VtZXMgc3RyZWFtaW5nIGF1ZGlvXG4gICAqL1xuICBAQ29yZG92YSh7IHN5bmM6IHRydWUsIHBsYXRmb3JtczogWydpT1MnXSB9KVxuICByZXN1bWVBdWRpbygpOiB2b2lkIHt9XG59XG4iXX0=