{"version":3,"file":"index.d.ts","sources":["index.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { IonicNativePlugin } from '@ionic-native/core';\n/**\n * @name Native Audio\n * @description Native Audio Playback\n * @usage\n * ```typescript\n * import { NativeAudio } from '@ionic-native/native-audio/ngx';\n *\n * constructor(private nativeAudio: NativeAudio) { }\n *\n * ...\n *\n * this.nativeAudio.preloadSimple('uniqueId1', 'path/to/file.mp3').then(onSuccess, onError);\n * this.nativeAudio.preloadComplex('uniqueId2', 'path/to/file2.mp3', 1, 1, 0).then(onSuccess, onError);\n *\n * this.nativeAudio.play('uniqueId1').then(onSuccess, onError);\n *\n * // can optionally pass a callback to be called when the file is done playing\n * this.nativeAudio.play('uniqueId1', () => console.log('uniqueId1 is done playing'));\n *\n * this.nativeAudio.loop('uniqueId2').then(onSuccess, onError);\n *\n * this.nativeAudio.setVolumeForComplexAsset('uniqueId2', 0.6).then(onSuccess,onError);\n *\n * this.nativeAudio.stop('uniqueId1').then(onSuccess,onError);\n *\n * this.nativeAudio.unload('uniqueId1').then(onSuccess,onError);\n *\n * ```\n */\nexport declare class NativeAudio extends IonicNativePlugin {\n    /**\n     * Loads an audio file into memory. Optimized for short clips / single shots (up to five seconds). Cannot be stopped / looped.\n     * @param id {string} unique ID for the audio file\n     * @param assetPath {string}  the relative path or absolute URL (inluding http://) to the audio asset.\n     * @returns {Promise<any>}\n     */\n    preloadSimple(id: string, assetPath: string): Promise<any>;\n    /**\n     * Loads an audio file into memory. Optimized for background music / ambient sound. Uses highlevel native APIs with a larger footprint. (iOS: AVAudioPlayer). Can be stopped / looped and used with multiple voices. Can be faded in and out using the delay parameter.\n     * @param id {string} unique ID for the audio file\n     * @param assetPath {string}  the relative path or absolute URL (inluding http://) to the audio asset.\n     * @param volume {number} the volume of the preloaded sound (0.1 to 1.0)\n     * @param voices {number} the number of multichannel voices available\n     * @param delay {number}\n     * @returns {Promise<any>}\n     */\n    preloadComplex(id: string, assetPath: string, volume: number, voices: number, delay: number): Promise<any>;\n    /**\n     * Plays an audio asset\n     * @param id {string} unique ID for the audio file\n     * @param completeCallback {Function} optional. Callback to be invoked when audio is done playing\n     * @returns {Promise<any>}\n     */\n    play(id: string, completeCallback?: Function): Promise<any>;\n    /**\n     * Stops playing an audio\n     * @param id {string} unique ID for the audio file\n     * @returns {Promise<any>}\n     */\n    stop(id: string): Promise<any>;\n    /**\n     * Loops an audio asset infinitely, this only works for complex assets\n     * @param id {string} unique ID for the audio file\n     * @return {Promise<any>}\n     */\n    loop(id: string): Promise<any>;\n    /**\n     * Unloads an audio file from memory\n     * @param id {string} unique ID for the audio file\n     * @returns {Promise<any>}\n     */\n    unload(id: string): Promise<any>;\n    /**\n     * Changes the volume for preloaded complex assets.\n     * @param id {string} unique ID for the audio file\n     * @param volume {number} the volume of the audio asset (0.1 to 1.0)\n     * @returns {Promise<any>}\n     */\n    setVolumeForComplexAsset(id: string, volume: number): Promise<any>;\n}\n"]}