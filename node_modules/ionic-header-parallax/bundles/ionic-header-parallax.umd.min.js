!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports,require("@angular/core")):"function"==typeof define&&define.amd?define("ionic-header-parallax",["exports","@angular/core"],t):t((e=e||self)["ionic-header-parallax"]={},e.ng.core)}(this,function(e,t){"use strict";var r=function(){function e(e,t){this.headerRef=e,this.renderer=t,this.maximumHeight=300}return e.prototype.ngAfterViewInit=function(){var e=this;setTimeout(function(){e.initElements(),e.initStyles(),e.initEvents()},100)},e.prototype.initElements=function(){var e=this,t=this.headerRef.nativeElement.parentElement;if(this.header=this.headerRef.nativeElement,this.toolbar=this.header.querySelector("ion-toolbar"),!this.toolbar)throw new Error("Parallax directive requires a toolbar or navbar element on the page to work.");this.ionTitle=this.toolbar.querySelector("ion-title"),this.toolbarBackground=this.toolbar.shadowRoot.querySelector(".toolbar-background"),this.barButtons=this.headerRef.nativeElement.querySelector("ion-buttons");var r=t.querySelector("ion-content");if(this.scrollContent=r.shadowRoot.querySelector(".inner-scroll"),!this.scrollContent)throw new Error("Parallax directive requires an <ion-content> element on the page to work.");this.imageOverlay=this.renderer.createElement("div"),this.renderer.addClass(this.imageOverlay,"image-overlay"),this.colorOverlay=this.renderer.createElement("div"),this.renderer.addClass(this.colorOverlay,"color-overlay"),this.colorOverlay.appendChild(this.imageOverlay),this.header.appendChild(this.colorOverlay),this.overlayTitle=this.ionTitle&&this.ionTitle.cloneNode(!0),this.overlayTitle&&(this.renderer.addClass(this.overlayTitle,"parallax-title"),setTimeout(function(){var t=e.overlayTitle.shadowRoot.querySelector(".toolbar-title");e.renderer.setStyle(t,"pointer-events","unset")})),this.overlayTitle&&this.imageOverlay.appendChild(this.overlayTitle),this.barButtons&&this.imageOverlay.appendChild(this.barButtons)},e.prototype.initStyles=function(){var e=this;this.headerHeight=this.scrollContent.clientHeight,this.ticking=!1,this.scrollContent&&toolbar&&(this.maximumHeight=parseFloat(this.maximumHeight.toString()),this.headerMinHeight=this.toolbar.offsetHeight,this.scrollContentPaddingTop=window.getComputedStyle(this.scrollContent,null).paddingTop.replace("px",""),this.scrollContentPaddingTop=parseFloat(this.scrollContentPaddingTop),this.originalToolbarBgColor=window.getComputedStyle(this.toolbarBackground,null).backgroundColor,this.renderer.setStyle(this.header,"position","relative"),this.overlayTitle&&(this.renderer.setStyle(this.overlayTitle,"color",this.titleColor),this.renderer.setStyle(this.overlayTitle,"position","absolute"),this.renderer.setStyle(this.overlayTitle,"width","100%"),this.renderer.setStyle(this.overlayTitle,"height","100%"),this.renderer.setStyle(this.overlayTitle,"text-align","center")),this.renderer.setStyle(this.colorOverlay,"background-color",this.originalToolbarBgColor),this.renderer.setStyle(this.colorOverlay,"height",this.maximumHeight+"px"),this.renderer.setStyle(this.colorOverlay,"position","absolute"),this.renderer.setStyle(this.colorOverlay,"top",0*-this.headerMinHeight+"px"),this.renderer.setStyle(this.colorOverlay,"left","0"),this.renderer.setStyle(this.colorOverlay,"width","100%"),this.renderer.setStyle(this.colorOverlay,"z-index","10"),this.renderer.setStyle(this.colorOverlay,"pointer-events","none"),this.renderer.setStyle(this.imageOverlay,"background-color",this.expandedColor),this.renderer.setStyle(this.imageOverlay,"background-image","url("+(this.imageUrl||"")+")"),this.renderer.setStyle(this.imageOverlay,"height","100%"),this.renderer.setStyle(this.imageOverlay,"width","100%"),this.renderer.setStyle(this.imageOverlay,"pointer-events","none"),this.renderer.setStyle(this.imageOverlay,"background-size","cover"),this.renderer.setStyle(this.imageOverlay,"background-position","center"),this.renderer.setStyle(this.toolbarBackground,"background-color",this.originalToolbarBgColor),this.barButtons&&(this.renderer.setStyle(this.barButtons,"pointer-events","all"),Array.from(this.barButtons.children).forEach(function(t){e.renderer.setStyle(t,"color",e.titleColor)})),this.scrollContent&&(this.renderer.setAttribute(this.scrollContent,"parallax",""),this.renderer.setStyle(this.scrollContent,"padding-top",this.maximumHeight+this.scrollContentPaddingTop-this.headerMinHeight+"px")))},e.prototype.initEvents=function(){var e=this;window.addEventListener("resize",function(){e.headerHeight=e.scrollContent.clientHeight},!1),this.scrollContent&&this.scrollContent.addEventListener("scroll",function(t){e.ticking||window.requestAnimationFrame(function(){e.updateElasticHeader()}),e.ticking=!0})},e.prototype.updateElasticHeader=function(){var e=this;if(this.scrollContent&&toolbar){this.scrollTop=this.scrollContent.scrollTop,this.scrollTop>=0?(this.translateAmt=this.scrollTop/2,this.scaleAmt=1):(this.translateAmt=0,this.scaleAmt=-this.scrollTop/this.headerHeight+1),this.headerMinHeight=this.toolbar.offsetHeight;var t=(this.maximumHeight-this.scrollTop-this.headerMinHeight)/(this.maximumHeight-this.headerMinHeight);t=Math.max(t,0);var r=this.maximumHeight-this.scrollTop;r=Math.max(r,this.headerMinHeight),this.renderer.setStyle(this.imageOverlay,"height",r+"px"),this.renderer.setStyle(this.imageOverlay,"opacity",""+t),this.renderer.setStyle(this.colorOverlay,"height",r+"px"),this.renderer.setStyle(this.colorOverlay,"opacity",r>this.headerMinHeight?"1":"0"),this.renderer.setStyle(this.toolbarBackground,"background-color",r>this.headerMinHeight?"transparent":this.originalToolbarBgColor),this.barButtons&&(r>this.headerMinHeight?(this.imageOverlay.append(this.barButtons),Array.from(this.barButtons.children).forEach(function(t){e.renderer.setStyle(t,"color",e.titleColor)})):(this.toolbar.append(this.barButtons),Array.from(this.barButtons.children).forEach(function(t){e.renderer.setStyle(t,"color","unset")}))),this.ticking=!1}},e.decorators=[{type:t.Directive,args:[{selector:"ion-header[parallax]"}]}],e.ctorParameters=function(){return[{type:t.ElementRef},{type:t.Renderer2}]},e.propDecorators={imageUrl:[{type:t.Input}],expandedColor:[{type:t.Input}],titleColor:[{type:t.Input}],maximumHeight:[{type:t.Input}]},e}();var i=function(){function e(){}return e.decorators=[{type:t.NgModule,args:[{declarations:[r],imports:[],exports:[r]}]}],e}();e.IonicHeaderParallaxModule=i,e.ParallaxDirective=r,Object.defineProperty(e,"__esModule",{value:!0})});
//# sourceMappingURL=ionic-header-parallax.umd.min.js.map